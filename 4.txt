def maxTeamExpertise(n, c, conflicts, expertise): 
	graph = [[] for i in range(n + 1)] 
	for i in range(c): 
		u, v = conflicts[i][0], conflicts[i][1] 
		graph[u].append(v) 
		graph[v].append(u) 
	dp = [[0 for i in range(2)] for j in range(n + 1)] 
	def dfs(node, prev, incl): 
		if dp[node][incl] != -1: 
			return dp[node][incl] 
		if incl == 1: 
			dp[node][incl] = expertise[node - 1] 
			for child in graph[node]: 
				if child != prev: 
					dp[node][incl] = max(dp[node][incl], dp[node][incl] + dfs(child, node, 0)) 
		else: 
			dp[node][incl] = 0
			for child in graph[node]: 
				if child != prev: 
					dp[node][incl] = max(dp[node][incl], dfs(child, node, 1) + dfs(child, node, 0)) 
		return dp[node][incl] 
	for i in range(1, n + 1): 
		dp[i][0] = dfs(i, 0, 0) 
		dp[i][1] = dfs(i, 0, 1) 
	return max(dp[1][0], dp[1][1]) 
n, c = 5, 3
conflicts = [[1, 2], [2, 3], [3, 4]] 
expertise = [10, 20, 30, 40, 50] 
print(maxTeamExpertise(n, c, conflicts, expertise))